<litprog>
<object name="wftk.c" language="c" item="main"/>


<format name="index">
<html><head><title>wftk core engine</title></head>
<body>
<h2>wftk: wftk core engine</h2>
<center>
[ <a href="wftk_engine.zip">download</a> ] [ <a href="wftk_xml.txt">xml source</a> ]
[ <a href="http://www.vivtek.com/wftk/discuss.pl">discussion</a> ]
</center>
<hr/>
This is the core workflow engine for the <a href="http://www.vivtek.com/wftk.html">open-source
workflow toolkit</a>.  It is a prototype, meaning that it is really bare-bones.  The basic
mode of operation of this version is as a command-line program which accepts one workflow
event command on its command line, or a script file on stdin.  Commands are simple: start a
process, complete or reject a task, set a value.  These commands are intended to be used by
a task manager such as the <a href="http://www.vivtek.com/wftk/todomgr/">to-do manager</a>
to interpret a workflow process definition.
<p/>
Besides its commands, the engine has two sources of input: the process definition and the
datasheet.  The procdef stores information about a class of processes; the datasheet stores
information about the current instance of that class.  Both documents are XML documents, and
the core engine interprets these documents using James Clark's
<a href="http://www.vivtek.com/expat.html">expat parser</a>, a stable and fairly simple parser.
<p/>
As the engine performs the commands given it, it emits commands which will be consumed by the
task manager.  These commands are on stdout and consists of instructions to active tasks,
complete the process, or set the owner of the process.  In addition, debugging output may be
interspersed on stdout and should be ignored by the task manager.
<p/>
This initial version of wftk core understands nothing about databases.  It knows only how to
get its process definitions from the local filesystem, and the same goes for datasheet storage.
It is wasteful, as it parses both procdef and datasheet on each call (instead of staying
resident as a daemon and caching this information.  All in good time.)  It relies on an
external task manager to maintain all database information about active processes and tasks;
indeed, it can't even activate a task alone.  It can, however, make changes to data, alert
users and others of events, and start programs.
<p/>
Here's how we do all this stuff:
[##itemlist##]

<center>
<hr width="75%"/>
<table width="75%"><tr><td><font size="-1">
This code and documentation are released under the terms of the GNU license.  They are
additionally copyright (c) 2000, Vivtek.  All rights reserved except those explicitly
granted under the terms of the GNU license.
</font></td></tr></table>
</center>
</body></html>
</format>

<format name="default">
<html><head><title>wftk core engine: [##label##]</title></head>
<body>
<h2>[##label##]</h2>
<center>
[<nbsp/><a href="[##prev##]">Previous: [##prevlabel##]</a><nbsp/>]
[<nbsp/><a href="index.html">Top: [##indexlabel##]</a><nbsp/>]
[<nbsp/><a href="[##next##]">Next: [##nextlabel##]</a><nbsp/>]
</center>

<hr/>
[##body##]


<center>
[<nbsp/><a href="[##prev##]">Previous: [##prevlabel##]</a><nbsp/>]
[<nbsp/><a href="index.html">Top: [##indexlabel##]</a><nbsp/>]
[<nbsp/><a href="[##next##]">Next: [##nextlabel##]</a><nbsp/>]
<br/><br/><hr width="75%"/>
<table width="75%"><tr><td><font size="-1">
This code and documentation are released under the terms of the GNU license.  They are
additionally copyright (c) 2000, Vivtek.  All rights reserved except those explicitly
granted under the terms of the GNU license.
</font></td></tr></table>
</center>
</body></html>
</format>

<item name="index" label="wftk core index" format="index">
</item>

<item name="main" label="Overview of the program and main()">
The structure of the program file is the same as any single-file C program: <code>#include</code>
directives, followed by declarations, followed by the main program.  A literate presentation is
<p/>
So let's go ahead and define our <code>#include</code>s, shall we?
<piece>
#include [[stdio.h>
#include [[malloc.h>
#include [[stdarg.h>
#include [[string.h>
#include "../xmlapi.h"
#include "../localdefs.h"
void output (char type, const char *format, ...);
</piece>

The <code>localdefs.h</code> file contains whatever local definitions a particular wftk
installation needs: particularly the locations of the process definition repository and the
datasheet repository (remember that in this version both of these are simply directories in
the local filesystem, but that later we'll have much more flexible options for both locations.)

Next we define all our data structures and helper functions.  XML and expat are rather core
to this.  Under the rubric of "XML" we'll define our central XML data structures and the
functions we'll use to work with them.  The use of the expat parser to parse XML text into
these structures will be in a separate section because it's not trivial.
<p/>
<i>(July 2000)</i> Actually, it was all so nontrivial that I moved all the XML functionality
out into an XML API file called, oddly enough, xmlapi.c.  I'll link to it later when I have a
little more time.  Please remind me about this if you think it's been long enough.
<p/>
Next up, let's look at how we will read our command input, and how we'll create our output.
Commands will be read from the command line or from a command stream and placed into a linked
list of command objects.  This will enhance the usability of this code in other projects, I
hope.  It'll also make it easy to write a different parsing front end for the interpreter.
<piece>
<insert name="command_input"/>
<insert name="output"/>
</piece>

Now we're getting close to the main program: let's define our globals.
<piece>
<insert name="globals"/>
</piece>

All the underpinnings out of the way, now we can look at the command interpreter.
The interpreter is broken into two parts -- really two interpreters.  The entire process
is driven by the command stack, but the commands on that stack drive the real work of
interpretation, which is doing whatever the procdef tells us to do.  Execution state is
contained in the datasheet, so that it can be reloaded between runs.  (Thus the datasheet
represents persistent storage implemented via XML -- lots of buzzwords in that!)
<piece>
<insert name="run_procdef"/>
<insert name="interpreter"/>
</piece>

And hey!  Just as you were losing hope, there's some code in this item after all!
Not much, granted, but all it has to do is to read the command from the command line,
use that to initialize the command stack, and then call the interpreter on the command
stack.

<piece>
int main(int argc, char * argv[])
{
   <insert name="globals.init"/>

   interpret (command_stack);

   xml_free (datasheet);
   xml_free (procdef);
   return 0;
}
</piece>
</item>

<item name="main.print_usage" label="Print usage description">
Here is as good a place as any to define the text we'll print if the command line doesn't
suit us.  There's not much that will offend us, I'm sure.
<piece>
printf ("usage: wftk [[command> [[arguments>\n");
printf ("  Commands:\n");
printf ("  start [[process id> [[procdef>\n");
printf ("  activate [[process id> [[locator> [[task id>\n");
printf ("  complete [[process id> [[task id>\n");
printf ("  reject [[process id> [[task id>\n");
printf ("  setvalue [[process id> [[name> [[type> [[file> or value on stdin\n");
printf ("  settaskvalue [[process id> [[task id> [[name> [[type> [[file> or value on stdin\n");
printf ("  script [[process id> [[file> or command list on stdin\n");
</piece>
</item>


<item name="command_input" label="The command stack and how to load it">
The term "command stack" is probably a misnomer.  What the structure really is, is a list
of things to do to the process.  Generally these things to do are task transitions (tasks
have been activated or completed) -- so I had thought to call these transitions.  But then
another command is to start a project, and then yet another is to set a value in a datasheet
(which should be done through the workflow engine to allow thread-safe usage, later.)
<p/>
So I finally decided that commands were what they are.  Sorry for the cheesy limit of 5 arguments
to a command, but I really don't want to get into a double-malloc situation for a totally
throwaway data structure.
<piece>
typedef struct _command COMMAND;
struct _command {
   char * name;
   int    argc;
   char * argv[5];
   COMMAND * next;
};
</piece>
The <code>next</code> member, of course, is to allow commands to be strung together into a linked
list.  Note that this "command language" is really simple, because the "commands" are really
notifications from the task manager that something has happened which the engine needs to act
upon.  Maybe "messages" would be a better terminology -- but nope, they're commands now.
Live with it.
<p/>
Well, so the other thing we want to define here is a handy little function to tack a command
onto a list of commands.
<piece>
COMMAND * command_add (COMMAND * list, char * name, int argc, ...)
{
   COMMAND * cmd;
   int i;
   va_list argv;

   va_start(argv, argc);
   cmd = (COMMAND *) malloc (sizeof (struct _command));
   cmd->name = name;
   cmd->argc = argc;
   for (i=0; i < argc; i++) {
      cmd->argv[i] = va_arg(argv, char *);
   }
   va_end(argv);
   cmd->next = NULL;

   if (!list) return (cmd);

   while (list->next != NULL) list = list->next;
   list->next = cmd;

   return cmd;
}
</piece>

Oh, and we'll want a function to free up lists, too:
<piece>
void command_freelist (COMMAND * list)
{
   COMMAND * cmd;

   while (list) {
      cmd = list;
      list = list->next;
      free ((void *) cmd);
   }
}
</piece>

And I guess one more function, this one to take a file stream and load up a command list from
it.  The version I have here is rather crude but we'll presumably improve on it later.
<piece>
void command_load (COMMAND * list, FILE * file)
{
   
}
</piece>
Oh.  Well, that's even cruder than I had intended, heh, but I'll get to it soon enough.
</item>


<item name="output" label="Our oh-so-complex output stream">
The output stream for this incarnation of wftk-core is simply a list of lines.  The first
character of each line tells what it does:<ul>
<li> <b>A</b>: activate task</li>
<li> <b>C</b>: complete process</li>
<li> <b>O</b>: set owner of process</li>
<li> <b>D</b>: debugging output</li>
<li> <b>E</b>: error output</li>
</ul>

The simplest way of doing this, of course, is with a nice little call to <code>vprintf</code>.
The output stream is always on <code>stdout</code>.

<piece>
void output (char type, const char *format, ...)
{
   va_list args;
   va_start (args, format);
   printf ("%c ", type);
   vprintf (format, args);
   va_end (args);
   printf ("\n");
}
</piece>
</item>


<item name="interpreter" label="Interpreting command streams">
The command stream is simply a list of notifications of events which have occurred.  The
engine must open the datasheet for the process involved, find the procdef which applies, and
then move down the command list, making appropriate changes to the datasheet as defined in
the procdef.  As this is done, output lines are being written to communicate back to the
task manager what things have been changes.
<p/>
Most particularly, when the procdef tells the engine that it is time to activate a task, the
engine must stop and notify the task manager.  This is simply because the task manager must
assign the task instance a unique identifier.  Once this is done, the task manager must
call the core engine again to active the task, because the datasheet must reflect the task ID
of the new task.  (I think.)
<piece>
<insert name="load_datasheet"/>
void interpret (COMMAND * list)
{
   FILE * temp;
   int  datasheet_dirty;
   XML * item;
   /*char line[1024];*/
   char * mark;
   XML * holder;

   datasheet_dirty = 0;

   while (list) {
      if (!strcmp (list->name, "start")) {
         <insert name=".start"/>
      } else if (!strcmp (list->name, "complete")) {
         <insert name=".complete"/>
      } else if (!strcmp (list->name, "reject")) {
         <insert name=".reject"/>
      } else if (!strcmp (list->name, "setvalue")) {
         <insert name=".setvalue"/>
      } else if (!strcmp (list->name, "script")) {
         <insert name=".script"/>
      } else {
         output ('E', "Unknown command %s encountered", list->name);
      }
skip_command:
      list = list->next;
   }

   if (datasheet != NULL && datasheet_dirty) {
      sprintf (sbuf, "%s%s", DATASHEET_REPOSITORY, process);
      temp = fopen (sbuf, "w");
      if (!temp) {
         output ('E', "Can't write to datasheet for process %s.  (File %s)", process, sbuf);
      } else {
         xml_write (temp, datasheet);
         fclose (temp);
      }
   }
}
</piece>
</item>

<item name="interpreter.start" label="'start' command">
Starting a process consists of these steps:
<ul>
<li>Finding the process definition</li>
<li>Opening a datasheet and marking the current version of the procdef into it</li>
<li>Calling the procdef interpreter on the procdef</li>
<li>Writing the datasheet out to the appropriate file</li>
</ul>
Of these steps, the last, writing the datasheet, is taken care of centrally.  If the
<code>datasheet_dirty</code> flag is set, then the datasheet will be written when the
interpreter finishes.
<p/>

So let's find our process definition.  The procdef identifier we're given is a general name;
we have to find the current version of that procdef and mark that version as the one we're
actually using.  Otherwise if changes are made, things are going to get rapidly out of whack.
<p/>
So in the process definition repository, there is a file <code>procdef_versions.txt</code>
for procdef ID 'procdef'.  That consists of lines of text, the first tab-delimited field of
which is the number of a version.  The last line, therefore, identifies the current version.
<p/>
For version <code>2a</code> of procdef <code>procdef</code>, the actual definition XML will be
in the file <code>procdef_2a.xml</code>.  That's what we'll write into our datasheet as our
governing procdef.
<p/>
And yeah, I'm using a goto here.  Sue me.
<piece>
if (procdef != NULL) {
   output ('E', "Start command must be first.  Skipping command.");
   goto skip_command;
}

if (list->argc < 1) {
   sprintf (sbuf, "%s%s", DATASHEET_REPOSITORY, process);
   temp = fopen (sbuf, "r");
   if (!temp) {
      output ('E', "No process '%s' exists.", process);
      return;
   }

   datasheet = xml_read (temp);
   fclose (temp);

   sprintf (sbuf, "%s%s", PROCESS_DEFINITION_REPOSITORY, xml_attrval (datasheet, "procdef"));
} else {
   sprintf (sbuf, "%s%s.xml", PROCESS_DEFINITION_REPOSITORY, list->argv[0]);
   temp = fopen (sbuf, "r");
   if (!temp) {
      output ('E', "No process '%s' defined.", list->argv[0]);
      return;
   }

   item = xml_read (temp);
   fclose (temp);

   if (!item) {
      output ('E', "Item file '%s' for process '%s' is corrupt.", sbuf, list->argv[0]);
      return;
   }

   sprintf (sbuf, "%s%s_%s.xml", PROCESS_DEFINITION_REPOSITORY, list->argv[0], xml_attrval (item, "ver"));
}

temp = fopen (sbuf, "r");
if (!temp) {
   output ('E', "Process definition version file '%s' is missing.", sbuf);
   return;
}

procdef = xml_read(temp);
fclose (temp);

if (datasheet == NULL) {
   datasheet = xml_create("datasheet");
   sprintf (sbuf, "%s_%s.xml", list->argv[0], xml_attrval (item, "ver"));
   xml_set(datasheet, "procdef", sbuf);
   xml_free (item);
}

datasheet_dirty = 1;

output ('N', xml_attrval (procdef, "name"));
output ('O', xml_attrval (procdef, "author"));
holder = xml_loc (procdef, "workflow.note[description]");
if (holder != NULL) {
   xml_writecontent (stdout, holder);
}
printf ("\nEOF\n");

queue_procdef (procdef);
process_procdef();
</piece>
</item>

<item name="interpreter.complete" label="'complete' command">
To complete a task, we: <ul>
<li>Load datasheet and procdef</li>
<li>Mark the task as complete</li>
<li>Hand off to the procdef interpreter</li>
</ul>
<piece>
load_datasheet();
mark = strrchr (list->argv[0], ':');
if (mark) mark++;
else (mark = list->argv[0]);

sprintf (sbuf, "queue.item[%s]", mark);
holder = xml_loc (queue, sbuf);
if (holder) xml_set (holder, "block", "resume");
datasheet_dirty = 1;
process_procdef();
</piece>
</item>

<item name="interpreter.reject" label="'reject' command">
Rejection of a task is pretty much the same as completion, except that we invoke
exception handlers.
</item>

<item name="interpreter.setvalue" label="'setvalue' command">
To set a value, we simply:<ul>
<li>Load the datasheet</li>
<li>Set the value</li>
</ul>
<piece>

</piece>
</item>

<item name="interpreter.script" label="'script' command">
The <code><i>script</i></code> command allows us to use command files (or stdin) to
signify several events at once.  Note that all commands in a single run <i>must</i> be
applied to the same process, and that process is specified on the command line.  The commands
to be found in a script file lack the process ID, because it's already been specified.
<p/>
In keeping with the idea that these commands are really state transitions, we will simply
tack commands from script files onto the end of the current list.  Thus we really don't
care that scripts run in order -- all this is conceptually happening simultaneously.
<piece>
temp = NULL;
if (list->argc) {
   output ('D', "Script %s", list->argv[0]);
   temp = fopen (list->argv[0], "r");
   if (!temp) { output ('E', "Unable to open script file '%s'", list->argv[0]); }
} else {
   output ('D', "Script on stdin");
   temp = stdin;
}

if (temp) {
   output ('D', "This is where the script would be loaded.", list->argv[0]);
   if (temp != stdin) fclose (temp);
}
</piece>
</item>


<item name="load_datasheet" label="Loading the datasheet for an active process">
This is a function, to be called at the beginning of every command except for "start".
If the datasheet is already loaded, then nothing happens.
<piece>
void load_datasheet ()
{
   FILE * temp;
   if (datasheet) return;

   sprintf (sbuf, "%s%s", DATASHEET_REPOSITORY, process);
   temp = fopen (sbuf, "r");
   if (!temp) {
      output ('E', "Can't open datasheet for process %s.", process);
      return;
   }
   datasheet = xml_read (temp);
   fclose (temp);
   state = xml_loc (datasheet, "datasheet.state");
   idcount = xml_attrvalnum (state, "idcount");
   queue = xml_loc (datasheet, "datasheet.state.queue");
   sprintf (sbuf, "%s%s", PROCESS_DEFINITION_REPOSITORY, xml_attrval (datasheet, "procdef"));
   temp = fopen (sbuf, "r");
   if (!temp) {
      output ('E', "Can't open process definition for process %s.", process);
      xml_delete (datasheet);
      datasheet = NULL;
      return;
   }
   procdef = xml_read (temp);
   fclose (temp);
}
</piece>
</item>

<item name="run_procdef" label="Interpreting the process definition">
Interpretation of the process definition, as explained above, is driven by the commands
passed in at invocation time.  The commands which interest us primarily are 'start' and
'complete'; each of these hands off to the procdef interpreter.
<p/>
The procdef interpreter runs largely recursively, reflecting the nature of the XML data
structure.  It is called with an XML structure and runs in the context of the currently
loaded datasheet.
<p/>
Note the use of goto to simulate tail recursion.
<piece>
XML * queue_procdef (XML * action)
{
   XML * item;

   if (action == NULL) return NULL;

   if (state == NULL) {
      state = xml_create("state");
      xml_append (datasheet, state);
   }
   if (queue == NULL) {
      queue = xml_create("queue");
      xml_append (state, queue);
   }
   item = xml_create("item");
   xml_setnum (item, "id", idcount++);
   xml_set (item, "type", action->name);
   xml_getloc (action, sbuf, 1023);
   xml_set (item, "loc", sbuf);
   xml_append (queue, item);
   return (item);
}

void process_procdef()
{
   XML * item;
   XML * def;
   XML * holder;
   XML * task;
   XML * data;
   XML * next;
   const char * type;
   int count;
   int keep;

   item = xml_first (queue);

   while (item != NULL) {
      if (!strcmp("yes", xml_attrval(item, "block"))) {
         item = xml_next(item);
         continue;
      }
      def = xml_loc (procdef, xml_attrval(item, "loc"));
      type = xml_attrval (item, "type");

      keep = 0;
      if (!strcmp(type, "workflow") || !strcmp(type, "sequence")) {
         <insert name=".sequence"/>
      } else if (!strcmp (type, "parallel")) {
         <insert name=".parallel"/>
      } else if (!strcmp (type, "task")) {
         <insert name=".task"/>
      } else if (!strcmp (type, "data")) {
         <insert name=".data"/>
      } else if (!strcmp (type, "situation")) {
         <insert name=".situation"/>
      } else if (!strcmp (type, "if") || !strcmp (type, "elseif")) {
         <insert name=".if"/>
      } else if (!strcmp (type, "alert")) {
         <insert name=".alert"/>
      } else if (!strcmp (type, "start")) {
         <insert name=".start"/>
      }

      if (keep) {
         xml_set (item, "block", "yes");
         item = xml_next(item);
      } else {
         if (strcmp ("workflow", type)) {
            sprintf (sbuf, "queue.item[%d]", xml_attrvalnum (item, "parent"));
            next = xml_loc (queue, sbuf);
            xml_delete (item);
            item = next;
            xml_set (item, "block", "no");
         } else {
            xml_delete (item);
            item = NULL;
         }
      }
   }
   sprintf (sbuf, "%d", idcount);
   xml_set (state, "idcount", sbuf);
}
</piece>
</item>

<item name="run_procdef.sequence" label="Handling sequence">
The sequence handler takes care of the sequence tag and also the contents of the outer
workflow tag (which are executed sequentially).  If the "cur" attribute is not yet yet, then
this is the first time we've encountered this sequence, and we queue up the first child of
the sequence (and note its location with "cur", of course).  Otherwise, we find the child
located by "cur", find its next sibling, and queue that up.
<p/>
If something gets queued, then we block.
<piece>
if (!strcmp ("", xml_attrval (item, "cur"))) {
   next = xml_firstelem (def);
} else {
   next = xml_loc (procdef, xml_attrval (item, "cur"));
   next = xml_nextelem (next);
}

if (next) {
   xml_set (queue_procdef (next), "parent", xml_attrval (item, "id"));
   xml_getloc (next, sbuf, sizeof(sbuf) - 1);
   xml_set (item, "cur", sbuf);
   keep = 1;
} else if (!strcmp (type, "workflow")) {
   output ('F', "Process %s complete.", process);
}
</piece>
</item>

<item name="run_procdef.parallel" label="Handling parallel">
The parallel item queues up all its children, then blocks.  When a child completes, it counts
the number of children complete; when its counter decrements to zero, it completes.
<piece>
if (!strcmp ("", xml_attrval (item, "remaining"))) {
   count = 0;
   next = xml_firstelem (def);
   while (next != NULL) {
      count ++;
      xml_set (queue_procdef (next), "parent", xml_attrval (item, "id"));
      next = xml_nextelem (next);
   }
} else {
   count = xml_attrvalnum (item, "remaining");
   count--;
}
xml_setnum (item, "remaining", count);
if (count > 0) keep = 1;
</piece>
</item>

<item name="run_procdef.task" label="Handling task">
Doing a task is nothing more than setting up task data and telling the task manager that the
task has been activated.  We'll take as the task ID the process ID plus our internal task ID;
this will make things easier to handle in the task manager, as it means our task IDs will 
always be unique (well, assuming the task manager always gives us unique process IDs.)
<piece>
if (strcmp (xml_attrval (item, "block"), "resume")) {
   sprintf (sbuf, "%s:%s", process, xml_attrval (item, "id"));
   task = xml_create ("task");
   xml_set (task, "id", sbuf);
   xml_append (datasheet, task);
   output ('A', "%s-%s-%s", sbuf, xml_attrval (def, "role"), xml_attrval (def, "label"));

   holder = xml_firstelem (def);
   while (holder != NULL) {
      if (!strcmp (holder->name, "data")) {
         data = xml_create ("data");
         xml_set (data, "id", xml_attrval (holder, "name"));
         xml_set (data, "type", xml_attrval (holder, "type"));
         xml_append (task, data);
      }
      holder = xml_nextelem (holder);
   }
   keep = 1;
}
</item>

<item name="run_procdef.data" label="Handling data">
</item>

<item name="run_procdef.situation" label="Handling situation">
</item>

<item name="run_procdef.if" label="Handling if and elseif">
</item>

<item name="run_procdef.alert" label="Handling alerts">
For the time being, anyway, we're passing alerts back to the task manager for handling.
So our output will be an 'L' line containing the recipient, followed by the contents of the
alert, terminated by a line containing "EOF" by itself.
The task manager can do whatever it wants with this information.
<piece>
output ('L', "%s:%s", xml_attrval(def, "type"), xml_attrval(def, "to"));
xml_writecontent (stdout, def);
printf ("\nEOF\n");
</piece>
</item>

<item name="run_procdef.start" label="start: Starting subprocesses">
</item>



<item name="globals" label="Global variables: state">
The state of the current process is kept in global variables.  These globals would naturally
be put into a <code>struct</code> in a daemon version of the core engine, but for a command-line
version, globals make more sense.
<p/>
Our three chief data structures are the process definition, the datasheet, and the command stack.
<piece>
XML * procdef;
XML * datasheet;
COMMAND * command_stack;
</piece>

Then we have some special parts of the datasheet which we'll point to separately.
<piece>
XML * state;
XML * queue;
int idcount;

char * process;

char sbuf[1024];
</piece>
</item>

<item name="globals.init" label="Initializing global variables from the command line">
About the only thing the initialization code has to do at this point is to read the
command off the command line and call <code>command_add</code> to start off the
list.
<p/>
The big <code>switch</code> is horrendous but I'm too rushed to think of an elegant way to
do this -- get yer name here, folks!  Step right up and tell me how it's done!
<piece>
if (argc #^lt# 3) {
   <insert name="main.print_usage"/>
}
process = argv[2];
switch (argc) {
   case 3:
      command_stack = command_add (NULL, argv[1], 0);
      break;
   case 4:
      command_stack = command_add (NULL, argv[1], 1, argv[3]);
      break;
   case 5:
      command_stack = command_add (NULL, argv[1], 2, argv[3], argv[4]);
      break;
   case 6:
      command_stack = command_add (NULL, argv[1], 3, argv[3], argv[4], argv[5]);
      break;
   case 7:
      command_stack = command_add (NULL, argv[1], 4, argv[3], argv[4], argv[5], argv[6]);
      break;
}
</item>


<item name="print_stack" label="Printing the current stack as a locator">
It's sort of silly to have this little function hanging around on its own page, but it doesn't
really fit in anywhere else all that well.  It's pretty obvious how this thing works, isn't
it?  You start at the bottom of the stack, and print location pieces as you move to the top.
<piece>
void print_stack()
{
   FRAME * cur;
   for (cur = stack.next; cur != NULL; cur = cur->next) {
      if (cur != stack.next) printf (".");
      printf ("%s", cur->name);
      if (cur->offset_in_parent > 0) {
         printf ("(%d)", cur->offset_in_parent);
      }
   }
   printf ("\n");
}
</piece>
</item>



</litprog>
