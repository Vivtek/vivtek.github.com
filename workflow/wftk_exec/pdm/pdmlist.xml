<litprog>
<object name="pdmlist.c" language="c" item="pdmlist"/>


<format name="default">
<html><head><title>Quick PDM list</title></head>
<body>
<h2>Command-line list of workflow items to which a user has access</h2>
<center>
[ <a href="wftk_pdm.zip">download</a> ] [ <a href="pdmlist.xml">xml source</a> ]
[ <a href="http://www.vivtek.com/wftk/discuss.pl">wftk discussion</a> ]
</center>

<hr/>
[##body##]

<center>
<hr width="75%"/>
<table width="75%"><tr><td><font size="-1">
This code and documentation are released under the terms of the GNU license.  They are
copyright (c) 2000, Vivtek.  All rights reserved except those explicitly
granted under the terms of the GNU license.  This presentation was prepared using
<a href="http://www.vivtek.com/lpml/">LPML</a>.  Try literate programming.  You'll like it.
</font>
</td>
</tr>
</table>
</center>
</body></html>
</format>

<item name="pdmlist" label="PDM list">
Let's include our includes and then get on with the show.
<piece>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "../user.h"
#include "../localdefs.h"

</piece>

<piece>
XML * user;
XML * list;
XML * item;
XML * elem;
XML * directory;

FILE * file;

char sbuf[1024];

int main (int argc, char * argv[])
{
   if (argc < 3) {
      printf ("Usage: pdmlist [[user> [[permission>\n\n");
      exit(1);
   }

   user = user_get (argv[1]);
   if (!user) {
      printf ("User %s unknown.\n", argv[1]);
      exit(1);
   }

   sprintf (sbuf, "%sindex.xml", PROCESS_DEFINITION_REPOSITORY);
   file = fopen (sbuf, "r");
   if (!file) {
      directory = xml_create ("index");
   } else {
      directory = xml_read (file);
      fclose (file);
   }

   list = user_list (user, "workflow", NULL, argv[2]);

   elem = xml_firstelem (list);
   while (elem) {
      sprintf (sbuf, "index.item[%s]", xml_attrval (elem, "object"));
      item = xml_loc (directory, sbuf);

      if (item) {
         printf ("%s:", xml_attrval (elem, "object"));
         printf ("%s\n", xml_attrval (item, "title"));
         xml_writecontent (stdout, item);
         printf ("\nEOF\n");
      }

      elem = xml_nextelem (elem);
   }

   xml_free (directory);
   xml_free (user);

   exit (0);
}
</piece>
</item>

</litprog>
