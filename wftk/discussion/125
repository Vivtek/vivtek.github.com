SUBJECT>Re: Mutl-threaded WfTK service ??
POSTER>Michael
EMAIL>wftk@vivtek.com
DATE>990412809
EMAILNOTICES>no
IP_ADDRESS>as0-024.blm.bluemarble.net
PREVIOUS>122
NEXT>
IMAGE>
LINKNAME>
LINKURL>
<P>&gt; For Solaris, a command line invocation is cool if there is only one thread
<BR>> of control. Multiple, concurrent invocations (same config) are in big
<BR>> trouble I suspect. They would have separate heaps but continually write to
<BR>> shared files, stomping on one another.
<P>Exactly. I need to incorporate a file locking mechanism into the localxml adaptors. What is done right now isn't even close to thread-safe, as you so winningly point out.
<P>&gt; What you want is a single invocation with multiple threads of control
<BR>> using the same heap (session). Does the session management take care of
<BR>> this? I don't see it if it does.
<P>No.
<P>&gt; (So, because your heap usage is not synchronized, the code to generate a
<BR>> unique ID is not thread safe. &quot;Unique&quot; IDs they are not. Not
<BR>> always, at any rate.)
<P>I think that flock will take care of that, but it's not going to scale terribly well. Database storage (datasheet in blob, one row per process) will also take care of it, as the database kernel will be forcing serial behavior. The localxml datasheet repository is really too immature.
<P>&gt; I don't know much about the AOL or Zope web servers. Does either one of
<BR>> these put a multi-threaded harness around single-threaded C code? I doubt
<BR>> it.
<P>No, of course not.
<P>&gt; But, an Apache module for WfTK...., now that would be stellar. Try going
<BR>> there if you insist on toughing it out in C. I'm serious. But, you could
<BR>> convince me (maybe) that Python threading in Zope is good enough. (Are you
<BR>> just itching to re-write WfTK in Python? As opposed to Java?)
<P>No, I don't particularly want to reimplement (even in Java -- the only reason to implement in Java is people think it sounds good) -- but Python talks very well to C libraries; it was written to be extended in C. Same with Tcl.
<P>But I doubt that either approach would give me threading. I'm just going to have to bite the bullet and figure it out.
<P>&gt; BTW, the idea of a Solaris port, as opposed to an AIX or a Linux port,
<BR>> implies Solaris threads, not pthreads (posix threads) in a multi-threaded
<BR>> application, which is certainly what WfTK must try to become. Threads
<BR>> differ across unices. But Solaris threads are &quot;a good thing&quot; and
<BR>> you should embrace them, especially if a &quot;Solaris port&quot; is to
<BR>> mean anything. I'd like to see it.
<P>Yep. I'm 100% in agreement.
<P>&gt; Oh, no. I just grep'ed the code for &quot;thread&quot;. You don't know
<BR>> diddly for threads.
<BR>> Why am I not surprised?
<P>I guess you're just one of those people who expects the worst. Or something.
