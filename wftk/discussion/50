SUBJECT>metamodel and random thoughts
POSTER>Brian Ewins
EMAIL>Brian.Ewins@btinternet.com
DATE>972307708
EMAILNOTICES>no
IP_ADDRESS>132.146.14.56
PREVIOUS>
NEXT> 62
IMAGE>
LINKNAME>
LINKURL>
<P>It strikes me reading the stuff on this site that the metamodel is missing? (or maybe I'm missing it on the site!). Theres a book called 'Production Workflow' (http://www1.fatbrain.com/asp/bookinfo/bookinfo.asp?theisbn=0130217530) that does a fair job of explaining Process Model Graphs as a metamodel, as used in MQSeries Workflow (a lot of the examples are in IBM's FDL, but are fairly similar to the WfMC's WPDL). Theres enough in there that you can - just about - implement a WF system from it. Anyway, the PM graph model is mathematically fairly rigorous, and resolves a lot of issues on splits and joins and the like. (eg when you split flow, how do you join parallel flows back together again? how do you do dead-node elimination (to prevent activities waiting for others which will never be executed)...etc).
<P>My 2c on the implementation you've chosen - I dunno about XML storage of a task state (if by state you actually mean the explicit state and not the contained data which passes between activities). Certainly XML storage of the contained data of a task/activity makes sense though. FDL provides a way of mapping data as you pass between tasks; it seems very limited and if we want to deal with real-world documents (ie existing XML specs) with as little transformation as possible then XSL-T is possibly a way to go for that part. I can't see *any* provision for data mapping in your current document. I know you speak in places about using a single container format (so no conversion required), but I can't see this fitting well with activities that have to deal with existing XML specs (eg we would use CommerceOne's xcbl - http://www.commerceone.com)
<P>XML definition of process models is the Right Thing but you're not taking full advantage of XML here. Why have a separate process model editor? See IBM's Xeena on alphaworks.ibm.com for an alternative.
<P>For the evaluation of conditions, you should think about just using XPath, testing for a non-null nodeset. This encompasses all of the WfMC goals as near as I can tell (locating data items within the container, comparisons on them and boolean combination of these). XPath allows you to find the set of nodes for which conditions are true - this amounts to the same thing. XPath is side-effect-free - TCL (assuming you don't mean the OMG's trader constraint language from Appendix B of the Trader Service spec) has side effects.
<P>All of this XML stuff could complicate scripting syntax though, to the extent that workflows may not be configurable by 'admin users', but only by programmers. If you do not address that concern (eg by GUI configuration, I guess) then you will not be competing with the big boys. One way out here is to ask the programmer to provide some translation between XML and the simple name-value pairs used in WPDL, the OMG spec, etc. Then constraints could be read and written by joe schmo.
<P>I think you also need to clear up some goals for folk. Bob Paynes message near the start of this thread indicated his dissatisfaction with an RDBMS based Wf engines. This must mean he is not interested in transaction integrity. All very well if you're clear thats what you want (and very very bad if thats not what you want!!). Given the lack of transactions in Mysql and the difficulty of implementing such a system, it might not be such a bad design restriction. Just serialise messages into the engine and you can get some protection against inconsistent state.
