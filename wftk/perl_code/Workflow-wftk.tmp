=head1 NAME

Workflow::wftk - a vast set of workflow-related tools in Perl,  building on the (partial) success of the original wftk workflow toolkit.


=head1 SYNOPSIS

The wftk is an open-source workflow toolkit, implemented entirely in native Perl.  The fact that it is a toolkit means that it attempts
to be all things workflow-related to all people, while imposing as few restrictions on your coding style and architecture as possible. 

"Workflow" is any code that deals with the organization of human behavior.  Since humans are notoriously slow and unpredictable when it comes
to scheduling, a workflow process is inherently asynchronous, and most of the time a workflow process will exist in a static form in a database.
It is activated to become a system process only when a human has completed some task and the system must now determine what comes next.

The C<Workflow::wftk> object itself represents a session against wftk repository.  The repository is (usually) a local directory containing
configuration files and probably some local data files, but data can reside in many places.  For a full, step-by-step introduction to the wftk
I heartily recommend consulting the tutorial at L<http://www.vivtek.com/wftk/perl_tutorial> -- that online book consists of a great deal of
example code derived from the unit tests, and presents each facet of the extensive functionality of the wftk in a more or less logical manner.

The POD documentation here will simply give you a much briefer overview of the usage of the wftk; it's really more of a quick reference.

=head1 VERSION


I<Implementation>:


   package Workflow::wftk;

   use warnings;
   use strict;

   use Workflow::wftk::Data;
   use Workflow::wftk::Record;
   use Workflow::wftk::Shell;

   use DBI;

   our $VERSION = '0.01';
   $Workflow::wftk::version = $VERSION;

=head1 FUNCTIONS

=head2 Basic session manipulation and utilities

=head3 new

The C<new> function opens a repository session.  You can supply either a definition string or the name of a configuration file.

   use Workflow::wftk;

   my $wftk = Workflow::wftk->new({file => 'wftk.conf'});   # Open a configuration file.
   my $wftk = Workflow::wftk->new();                        # Open the default configuration file (wftk.conf).

   my $wftk = Workflow::wftk->new(<<"   CONF");             # Open a session using a definition string.
    ! [mylist: list]
    ! type: memory:fields=field1,field2
    !
    ! [second_list: list]
    ! type: memory
    ! *fields: field1 field2 field3
    ! description: My second list
   CONF

The configuration in the final example creates a dynamic repository with two data lists.


I<Implementation>:


   sub new {
      my $self = {};
      bless $self, shift;

      $self->{conf} = Workflow::wftk::Record->new(@_);

      my %lists = $self->{conf}->get_kind('list');
      $self->{deflists} = \%lists;
      $self->{lists} = {};

      $self->{directory} = $self->{conf}->get('directory') || '.'; # TODO: File::Spec.

      $self->{module} = $INC{'Workflow/wftk.pm'}; # Where is this module installed?
      $self->{module} =~ s/\.pm$//;

      $self->{diagnostic} = '';

      $self->{dbh} = DBI->connect('dbi:wftk:','usr','pwd',
                                   {
                                     RaiseError=>1,
                                     PrintError=>0,
                                     wftk_repos=>$self,
                                   });

      return $self;
   }

=head3 config

The C<config> method gets a value from the configuration read, if it's there, or returns undef if not.

   my $list_type = $wftk->config('mylist.type');


I<Implementation>:


   sub config { $_[0]->{conf}->get($_[1]); }

=head3 directory

The C<directory> function just returns the working directory for the repository.

   my $dir = $wftk->directory();


I<Implementation>:


   sub directory { $_[0]->{directory} }

=head2 List API for data manipulation

All data in the wftk is organized into B<lists>.  There is an entire very long chapter of the tutorial devoted to list access,
so this reference will just scratch the surface.  All data access is in reality handled by C<Workflow::wftk::Data>, but the
session object gives you some convenient ways to get to it without getting your hands dirty or having to refer to that module
directly.

=head3 lists

The C<lists> method returns a hash whose keys are the names of all lists either open in the current session
or defined in the repository's configuration, and whose values are the descriptions of those lists.

   my %lists = $wftk->lists();


I<Implementation>:


   sub lists {
      my $self = shift;
      my %r = ();
      while (my ($k,$v) = each %{$self->{lists}}) { $r{$k} = $v->describe(); }
      foreach (sort keys %{$self->{deflists}}) {
         next if defined $r{$_};
         $r{$_} = 'not opened';
      }
      return %r;
   }

=head3 list

The C<list> method retrieves an open list object from the session by name.  If the name isn't given, it uses
the current list of the shell, if there is one.

   my $list = $wftk->list('mylist');


I<Implementation>:


   sub list {
      my $self = shift;
      my $list = shift;
      $list = $self->curlist() unless $list;
      return unless $list;
      return $self->{lists}->{$list};
   }

=head3 open

The C<open> method opens a list given a name and an optional definition string.  If the list is
already open, a handle is returned.  (No error is raised if the definitions don't match, so beware.)
If the definition is omitted and the list is defined in the configuration for the repository, that
definition will be used.  Otherwise, a memory list is opened with no fields.  (Meaning that the
fields will be taken from the records you store in it.)


I<Implementation>:


   sub open {
      my ($self, $list, $def) = @_;
      return $self->list($list) if $self->list($list);
      return Workflow::wftk::Data->new ($self, $list, $def);
   }

=head3 close

The C<close> method closes an open list by name.


I<Implementation>:


   sub close {
      my ($self, $list) = @_;
      return unless $self->{lists}->{$list};
      return $self->{lists}->{$list}->close;
   }

=head3 drop

The C<drop> method drops a list from the repository.  If it's in-memory, this deletes it.  If not, it may or may not delete its
storage (i.e. if it's a file in the filesystem, the file may be left in place).


I<Implementation>:


   sub drop {
      my ($self, $list) = @_;
      delete $self->{lists}->{$list} if $list;
   }

=head3 copy

The C<copy> method just copies one list to another with a minimum of hassle, by reading records from the source and writing them
to the destination.  The destination is dropped first, if it exists, so the copy is clean (use C<copy_into> to avoid that).


I<Implementation>:


   sub copy {
      my ($self, $src, $dst) = @_;
      $self->drop($dst);
      $self->copy_into($src, $dst);
   }

=head3 copy_into


I<Implementation>:


   sub copy_into {
      my ($self, $src, $dst) = @_;
      my $list_obj = $self->open ($src);
      my $list_dst = $self->open ($dst);
      for (my $key = $list_obj->first_key(); defined $key; $key = $list_obj->next_key()) {
         my $rec = $list_obj->get($key);
         $list_dst->mod($key,$rec);
      }
      #$list_obj->close();
      #$list_dst->close();
   }

=head3 list_conf

The C<list_conf> method sets up a configuration record (based on C<Workflow::wftk::Record>), starting from the name
of a (possibly preconfigured) list and the definition string, if any, given when it is opened.  The definition string
overrides any preconfiguration values which may be in the repository's setup, and is formatted more or less in the
same way as DBI connect strings.


I<Implementation>:


   sub list_conf {
      my ($self, $list, $def) = @_;

      #print STDERR "list_conf for $list\n";
      #print STDERR "def is $def\n" if $def;

      my $ret = Workflow::wftk::Record->make_record ({name => $list});
      if (grep { $_ eq $list } $self->{conf}->get_kind('list')) {
         #print STDERR "$list defined in repository\n";
         my $conf = $self->{conf}->get($list);
         #print STDERR "conf is $conf\n";
         foreach my $f ($conf->fields()) {
            $ret->put($f, scalar $conf->get($f));
         }
      }

      $ret->put('type', 'memory') unless $ret->get('type');
      if ($ret->get('type') =~ /:/ && not $def) {
         $def = $ret->get('type');
      }

      if ($def) {
         my ($type, $rest) = split /: */, $def, 2;
         $ret->put('type', $type);

         #print STDERR "type is $type; rest is $rest\n";

         my @parts = split / *; */, $rest;

         if ($parts[0] !~ /=/) {
            $ret->put($type, shift @parts);
            #print STDERR "primary parameter is " . $ret->get($type) . "\n";
         }
         foreach (@parts) {
            my ($k,$v) = split / *= */, $_, 2;
            $v = 1 unless defined $v;
            if ($k eq 'fields') {
               my @fields = split /[ ,]+/, $v;
               $ret->put ('fields', \@fields);
            } else {
               $ret->put ($k, $v);
            }
         }
      }

      return $ret;
   }

=head2 The command-line interface

=head3 do

The C<do> method checks whether a shell has been created against the session already.  If so, it either runs the command given, or starts
an interactive shell.  This is the kind of thing Perl makes so easy, the kind of thing I spent a lot of 2002 trying -- and failing -- to get
quite right in C.

The shell also provides an interface for SQL queries against the repository, and the result of an SQL query is accessible as a temporary
list in the repository.  How exactly that is accessed is still a little unclear.


I<Implementation>:


   sub do {
      my $self = shift;
      $self->{shell} = Workflow::wftk::Shell->new($self) unless $self->{shell};
      $self->{shell}->do(@_);
   }

=head3 curlist, curkey

The C<curlist> method returns the current list selected in the shell, while C<curkey> returns the current key, if there is one.


I<Implementation>:


   sub curlist {
      my ($self, $list) = @_;
      return unless $self->{shell};
      if ($list) {
         if ($self->{shell}->{curlist} = $self->open($list)) {
            $self->{shell}->{curlistname} = $list;
         } # TODO: error handling?
      }
      return $self->{shell}->{curlistname};
   }

   sub curkey {
      my $self = shift;
      return unless $self->{shell};
      return $self->{shell}->{lastkey};
   }

=head3 new_record

The C<new_record> creates a new record for the current list (or the list named as its optional second argument if given)
and makes that record the current record in the shell.


I<Implementation>:


   sub new_record {
      my ($self, $list) = @_;
      $self->{shell} = Workflow::wftk::Shell->new($self) unless $self->{shell};
      $self->curlist($list);
      my $list_obj = $self->{shell}->{repos}->list() or return;

      $self->{shell}->{lastkey} = "<new>";
      $self->{shell}->{curobj} = $list_obj->get_new(1);
      $self->{shell}->{object_dirty} = 0;
   }

=head3 load_record

Given a string representation of a record's data fields, C<load_record> sets the fields to match the string specification.


I<Implementation>:


   sub load_record {
      my ($self, $in) = @_;
      return unless $self->{shell};
      return unless $self->{shell}->{curobj};
      $self->{shell}->{curobj}->parse($in);
   }

=head3 get, put

The C<get> and C<put> methods are shortcuts for the same methods in the current record.


I<Implementation>:


   sub get {
      my $self = shift;
      return unless $self->{shell};
      return unless $self->{shell}->{curobj};
      $self->{shell}->{curobj}->get(@_);
   }

   sub put {
      my $self = shift;
      return unless $self->{shell};
      return unless $self->{shell}->{curobj};
      $self->{shell}->{curobj}->get(@_);
   }

=head2 The SQL interface

=head3 execute_sql

Here's where things get fun.  The C<execute_sql> runs an SQL command against the lists defined in the repository.
 

I<Implementation>:


   sub execute_sql {
      my $self = shift;
      my $sql = shift;

      $sql =~ s/[; ]*$//;

      my $result = 'result';   # TODO: redirection.

      my $dbh = $self->dbh();
      my $sth = eval { $dbh->prepare ($sql) };
      if ($@) {
         print $@;
         return;
      }
      eval { $sth->execute(@_) };
      if ($@) {
         print $@;
         return;
      }
      if ($sth->rows()) {
         if ($sql =~ /^select/i) {
            #print $sth->rows() . " row(s)\n";

            $self->drop($result) if $result;   # TODO: I should be able to specify a generic list spec, and for copy or copy_into.
            my $list_obj = undef;
            $list_obj = $self->open ($result) if $result;
            $list_obj->describe($sql) if $list_obj;
            $list_obj->{sort_keys} = 0;
            $list_obj->{cache_keys} = 1;
            my $header = 0;
            my $key_inc = 0;
            my $this_key = undef;
            while (my $row = $sth->fetchrow_hashref) {
               unless ($header++) {
                  my @keys = keys %$row;
                  if ($keys[0] eq '!key') {
                     $key_inc = 1;
                     shift @keys;
                  }
                  $list_obj->add_fields(@keys);
               }
               my $rec = $list_obj->get_new();
               while (my ($k,$v) = each %$row) {
                  if ($k eq '!key') {
                     $this_key = $v;
                  } else {
                     $rec->put($k, $v);
                  }
               }
               if ($key_inc and $list_obj) {
                  $list_obj->mod($this_key,$rec);
               } else {
                  $list_obj->add($rec);
               }
            }
            return 1;
         #} else {
         #   print $sth->rows() . " row(s) affected\n";
         }
      }
      return 0;
   }

=head3 sql_get_list

Next is the C<sql_get_list> method, which executes a SELECT statement and returns a list of results.  If there is only a single column
in the results, C<sql_get_list> returns a list of scalar values; otherwise, it returns a list of arrayrefs.  If you want to save the
overhead of caching the entire result set from a larger query, use the DBI interface; this is only here for the sake of convenience.

Essentially, this is I<exactly the same> as C<execute_sql> above, except that it returns a result.

On closer reading of the DBI::st spec, I see that DBI actually provides a lot of sophisticated ways of retrieving data.  So if you're
proficient with DBI, perhaps you see this as unnecessary syntactic sugar, and perhaps you're even right.  But I feel comforted by it.


I<Implementation>:


   sub sql_get_list {
      my $self = shift;
      my $query = shift;
      $query =~ s/[; ]*$//;

      my $dbh = $self->dbh();
      my $sth = eval { $dbh->prepare ($query) };
      if ($@) {
         print $@;  # TODO: this ain't right.
         $self->diag($@);
         return;
      }
      eval { $sth->execute(@_) };
      if ($@) {
         print $@; # TODO: still ain't right.
         $self->diag($@);
         return;
      }
      my @result = ();
      if ($sth->rows()) {
         if ($query =~ /^select/i) {
            while (my @row = $sth->fetchrow_array) {
               if ($sth->{NUM_OF_FIELDS} eq 1) {
                  push @result, $row[0];
               } else {
                  push @result, \@row;
               }
            }
         }
      }

      return @result;
   }

=head3 sql_get

The C<sql_get> method does exactly the same thing as C<sql>get>list>, except it returns the first row of the select.  Again, if a single
value is selected, that's the value returned; if a row of multiple values is requested, the return is an arrayref.


I<Implementation>:


   sub sql_get {
      my $self = shift;
      my $query = shift;
      $query =~ s/[; ]*$//;

      my $dbh = $self->dbh();
      my $sth = eval { $dbh->prepare ($query) };
      if ($@) {
         print $@;  # TODO: this ain't right.
         $self->diag($@);
         return;
      }
      eval { $sth->execute(@_) };
      if ($@) {
         print $@; # TODO: still ain't right.
         $self->diag($@);
         return;
      }
      my $result;
      if ($sth->rows()) {  # TODO: do we need to limit rows to 1?
         if ($query =~ /^select/i) {
            while (my @row = $sth->fetchrow_array) {
               if ($sth->{NUM_OF_FIELDS} eq 1) {
                  $result = $row[0];
                  $sth->finish;
               } else {
                  $result = \@row;
                  $sth->finish;
               }
               return $result;
            }
         }
      }

      return $result;   # This gets returned if there are no rows returned from the query.
   }

=head2 The DBI interface 

There are really only two methods that expose the DBI interface per se at the session level.  The C<dbh> method, of course,
returns the session's internal DBI handle to itself.  The C<prepare> method just passes its arguments in to that internal
handle and returns the result.

=head3 dbh

  my $dbh = $wftk->dbh();
  $dbh->prepare ("select * from mylist where field=?", $value);


I<Implementation>:


   sub dbh { $_[0]->{dbh} }

=head3 prepare

  $wftk->prepare ("select * from mylist where field=?", $value);


I<Implementation>:


   sub prepare {
      my $self = shift;
      $self->{dbh}->prepare(@_);
   }

