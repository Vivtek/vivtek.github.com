<litprog>
<object name="_getargs.txt" language="perl" item="getargs"/>


<format name="default">
<html><head><title>Perl/CGI implementation</title></head>
<body>
<h2>Perl/CGI implementation of RFC1867 file upload</h2>
<hr/>
[##body##]

<center>
<hr width="75%"/>
<table width="75%"><tr><td><font size="-1">
This code and documentation are released under the terms of the GNU license.  They are
additionally copyright (c) 2000, Vivtek.  All rights reserved except those explicitly
granted under the terms of the GNU license.  The code is presented in a literate programming
style using the <a href="http://www.vivtek.com/lpml/">LPML tool</a>, available free of
charge from Vivtek.  Try it, you'll like it.
</font></td></tr></table>
</center>
</body></html>
</format>

<item name="getargs" label="Main file">
This is an implementation of RFC1867 in a form which makes it a generally useful procedure
for getting form input in a CGI program.  That is, you can call this procedure whether
you're expecting file uploads or not; there's very little overhead involved if no files are
actually provided.  So it makes for convenient site design.
<p/>
Since this code will execute in a CGI environment, there are two sources of input data.
The QUERY_STRING environment variable may contain &amp;-delimited URL-encoded data, and
there may be input data on stdin as well.  If a normal form is used, then stdin-derived
data is also &amp;-delimited URL-encoded data, but if an RFC1867 file upload form is in
use, then the format is as I describe on my <a href="http://www.vivtek.com/rfc1867.html">RFC1867
page</a>.  This routine doesn't care; it'll take anything it can get, and will even combine
data from both possible sources.
<p/>
You can get the finished form of the code <a href="_getargs.txt">here</a>.  To use it with
your CGI code, just put it in your use page and do this:
<blockquote><code>use "_getargs.txt";</code></blockquote>
(Or you can rename the file to something else, of course.)
<p/>
Here's what the main function looks like.  All the underlined italic phrases are code 
chunks which are elaborated down below.  You can follow the link, or you can just scroll
down the page; this whole file is presented on one page.
<piece>
sub getargs {
   <insert name=".collect"/>
   <insert name=".process"/>
   <insert name=".quitnow"/>

   # OK, handle upload-type form
   my $uploads = shift @_;
   my ($junk,$boundary) = split /=/, $tagset{_input_content_type}, 2;
   $boundary =~ s/\n//;
   $boundary = "--$boundary";
   my $line;
   my $lines;
   my $name;
   my $type;
   my $filename;
   my $file = 0;
   my $localname;

LINE: while (<>) {
      last if ($_ eq "${boundary}--\r\n");
      if ($_ eq "$boundary\r\n") {
         # Close any open temp file.
         close _GETARGS_TEMP;

         $line=<>; # Get first line of headers.
         $line =~ s/.*?; //; # Chop off the Content-Disposition part, we don't need it.
         ($name, $filename) = split /; /, $line, 2;
         ($junk, $name) = split /"/, $name;
         $file = 0;
         $lines = 0;
         if ($filename ne "") {
            ($junk, $filename) = split /"/, $filename;
            $tagset{"_details_$name"} = $filename;
            $line=<>;
            chomp $line;
            ($junk, $type) = split ": ", $line;
            $type =~ s/\r*//g;
            $file = 1;
            if ($filename ne '') {
               $tagset{$name} = getargs_makefilename ($$uploads{file}, \%tagset, $name);
               $ext = $$uploads{mime}{$type};
               if ($ext eq '') {
                  $ext = $filename;
                  $ext =~ s/^.*\.//;
               }
               if ($ext ne '') { $tagset{$name} .= ".$ext"; }
               $localname = "$$uploads{base}/$tagset{$name}";
               $tagset{"_details_$name"} .= "|" . $type;
               if ($localname ne '') {
                  if (open _GETARGS_TEMP, ">$localname") {
                     $tagset{"_details_$name"} .= "|" . $localname;
                  }
               }
            } else { # No file was uploaded; we may want to preserve what was already there.
               $tagset{$name} = '';
               if ($tagset{"_keep_$name"} ne '') {
                  $tagset{$name} = $tagset{"_existing_$name"};
               }
            }
         }
         while ($line=<>) { next LINE if $line == "\n"; }
      }

      if ($file) {
         # Write the line to the temp file.
         print _GETARGS_TEMP $_;
      } else {
         s/[\r\n]*$//;
         if ($lines > 0) {$tagset{$name} .= "\n"; }
         $tagset{$name} .= $_;
         $lines ++;
      }
   }
   close _GETARGS_TEMP;

   return \%tagset;
}

sub getargs_makefilename {
   my $spec = shift(@_);
   my $object = shift(@_);
   my $field = shift(@_);

   while ($spec =~ /\[(.*?)\]/) {
      $tag = $1;
      if ($tag eq '(field)') {
         $val = $field;
      } elsif ($tag eq '(date)') {
         $val = now();
      } else {
         $val = $$object{$tag};
      }
      $val =~ tr/ /_/;
      $val =~ s/[&!"']//g;
      $tag =~ s/\(/\\(/g;
      $tag =~ s/\)/\\)/g;
      $spec =~ s/\[$tag\]/$val/g;
   }

   return $spec;
}


1;
</piece>
</item>

<item name="getargs.collect" label="Collect all the URL-encoded input into $input">
The contents of the QUERY_STRING environment variable are always URL-encoded.  And if we're
not getting our input from an RFC1867 multipart-data form, then stdin also contains
URL-encoded data, so we simply get it line by line and tack it onto <code>$input</code>.
<piece>
my $input = $ENV{QUERY_STRING};
if (lc($ENV{CONTENT_TYPE}) eq 'application/x-www-form-urlencoded') {
   $input .= "&" if $input ne '';
   while (<>) {
     chomp;
     $input .= $_;
   }
}
</piece>
</item>

<item name="getargs.process" label="Process the URL-encoded input into hash">
Each chunk of URL-encoded input is split into a name and value, delimited by the '='.
So we split on the '=', then we URL-decode the value and write it into our output hash
keyed by the name.  This has some side effects, notable among which is the fact that a URL
may easily contain two values with the same name (some of my own code uses this sort of trick,
for instance, to represent a list of checkboxes of items to delete from a list.)  If this
happens, the hash will <i>not</i> reflect this -- the last occurrence of a name will be the
one that survives in the hash.
<p/>
So you've been warned.  For most applications this code will work fine.

<piece>
my $i;
my @t;
my %tagset;
foreach $i (split /&/, $input) {
   @t = split /=/, $i, 2;
      
   $t[1] =~ tr/+/ /;
   $t[1]=~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
   $tagset{$t[0]} = $t[1];
}
</piece>
</item>


<item name="getargs.quitnow" label="Return the hash right now if we don't have file uploads">
To check whether there is mulitpart data on stdin, we just check our content type.  If it's
not multipart, we return a reference to our <code>tagset</code> hash.
<piece>
return \%tagset if (lc($ENV{CONTENT_TYPE}) !~ m'multipart/form-data;');
</piece>

If we <i>do</i> have multi-part data, then it's still going to get into the hash, but it will
be considerably more involved to get it.
</item>


</litprog>
